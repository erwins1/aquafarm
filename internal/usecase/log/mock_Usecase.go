// Code generated by mockery v2.14.0. DO NOT EDIT.

package log

import (
	model "aquafarm/common/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUsecase is an autogenerated mock type for the Usecase type
type MockUsecase struct {
	mock.Mock
}

// GetHttpCountLog provides a mock function with given fields: ctx
func (_m *MockUsecase) GetHttpCountLog(ctx context.Context) ([]model.LogCount, error) {
	ret := _m.Called(ctx)

	var r0 []model.LogCount
	if rf, ok := ret.Get(0).(func(context.Context) []model.LogCount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.LogCount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUsecase creates a new instance of MockUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUsecase(t mockConstructorTestingTNewMockUsecase) *MockUsecase {
	mock := &MockUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
