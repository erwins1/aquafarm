// Code generated by mockery v2.14.0. DO NOT EDIT.

package farm

import (
	model "aquafarm/common/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUsecase is an autogenerated mock type for the Usecase type
type MockUsecase struct {
	mock.Mock
}

// DeleteFarmByID provides a mock function with given fields: ctx, req
func (_m *MockUsecase) DeleteFarmByID(ctx context.Context, req model.DeleteFarmByIDReq) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.DeleteFarmByIDReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFarm provides a mock function with given fields: ctx, req
func (_m *MockUsecase) GetFarm(ctx context.Context, req model.GetFarmReq) ([]model.GetFarmResult, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.GetFarmResult
	if rf, ok := ret.Get(0).(func(context.Context, model.GetFarmReq) []model.GetFarmResult); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.GetFarmResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.GetFarmReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFarmByID provides a mock function with given fields: ctx, req
func (_m *MockUsecase) GetFarmByID(ctx context.Context, req model.GetFarmByIDReq) (model.GetFarmByIDRes, error) {
	ret := _m.Called(ctx, req)

	var r0 model.GetFarmByIDRes
	if rf, ok := ret.Get(0).(func(context.Context, model.GetFarmByIDReq) model.GetFarmByIDRes); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.GetFarmByIDRes)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.GetFarmByIDReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertFarm provides a mock function with given fields: ctx, req
func (_m *MockUsecase) InsertFarm(ctx context.Context, req model.InsertFarmReq) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.InsertFarmReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertFarm provides a mock function with given fields: ctx, req
func (_m *MockUsecase) UpsertFarm(ctx context.Context, req model.UpsertFarm) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UpsertFarm) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUsecase creates a new instance of MockUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUsecase(t mockConstructorTestingTNewMockUsecase) *MockUsecase {
	mock := &MockUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
