// Code generated by mockery v2.14.0. DO NOT EDIT.

package farm

import (
	model "aquafarm/common/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// DeleteFarmByID provides a mock function with given fields: ctx, req
func (_m *MockRepository) DeleteFarmByID(ctx context.Context, req model.DeleteFarmByIDReq) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.DeleteFarmByIDReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFarm provides a mock function with given fields: ctx, filter
func (_m *MockRepository) GetFarm(ctx context.Context, filter model.GetFarmReq) ([]model.GetFarmResult, error) {
	ret := _m.Called(ctx, filter)

	var r0 []model.GetFarmResult
	if rf, ok := ret.Get(0).(func(context.Context, model.GetFarmReq) []model.GetFarmResult); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.GetFarmResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.GetFarmReq) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFarmByID provides a mock function with given fields: ctx, req
func (_m *MockRepository) GetFarmByID(ctx context.Context, req model.GetFarmByIDReq) (model.GetFarmByIDRes, error) {
	ret := _m.Called(ctx, req)

	var r0 model.GetFarmByIDRes
	if rf, ok := ret.Get(0).(func(context.Context, model.GetFarmByIDReq) model.GetFarmByIDRes); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.GetFarmByIDRes)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.GetFarmByIDReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFarmByName provides a mock function with given fields: ctx, req
func (_m *MockRepository) GetFarmByName(ctx context.Context, req model.GetFarmByNameReq) ([]model.GetFarmByNameRes, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.GetFarmByNameRes
	if rf, ok := ret.Get(0).(func(context.Context, model.GetFarmByNameReq) []model.GetFarmByNameRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.GetFarmByNameRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.GetFarmByNameReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertFarm provides a mock function with given fields: ctx, data
func (_m *MockRepository) InsertFarm(ctx context.Context, data model.InsertFarmReq) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.InsertFarmReq) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFarm provides a mock function with given fields: ctx, req
func (_m *MockRepository) UpdateFarm(ctx context.Context, req model.UpsertFarm) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UpsertFarm) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
