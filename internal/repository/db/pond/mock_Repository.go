// Code generated by mockery v2.14.0. DO NOT EDIT.

package pond

import (
	model "aquafarm/common/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// DeletPondByID provides a mock function with given fields: ctx, req
func (_m *MockRepository) DeletPondByID(ctx context.Context, req model.DeletePondByID) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.DeletePondByID) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPond provides a mock function with given fields: ctx, filter
func (_m *MockRepository) GetPond(ctx context.Context, filter model.GetPondReq) ([]model.Pond, error) {
	ret := _m.Called(ctx, filter)

	var r0 []model.Pond
	if rf, ok := ret.Get(0).(func(context.Context, model.GetPondReq) []model.Pond); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Pond)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.GetPondReq) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPondByFarmID provides a mock function with given fields: ctx, req
func (_m *MockRepository) GetPondByFarmID(ctx context.Context, req model.GetPondByFarmIDReq) ([]model.Pond, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.Pond
	if rf, ok := ret.Get(0).(func(context.Context, model.GetPondByFarmIDReq) []model.Pond); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Pond)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.GetPondByFarmIDReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPondByID provides a mock function with given fields: ctx, req
func (_m *MockRepository) GetPondByID(ctx context.Context, req model.GetPondByID) (model.Pond, error) {
	ret := _m.Called(ctx, req)

	var r0 model.Pond
	if rf, ok := ret.Get(0).(func(context.Context, model.GetPondByID) model.Pond); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.Pond)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.GetPondByID) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPondByName provides a mock function with given fields: ctx, req
func (_m *MockRepository) GetPondByName(ctx context.Context, req model.GetPondByNameReq) ([]model.GetPondByNameRes, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.GetPondByNameRes
	if rf, ok := ret.Get(0).(func(context.Context, model.GetPondByNameReq) []model.GetPondByNameRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.GetPondByNameRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.GetPondByNameReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPond provides a mock function with given fields: ctx, data
func (_m *MockRepository) InsertPond(ctx context.Context, data model.InsertPondReq) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.InsertPondReq) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePond provides a mock function with given fields: ctx, req
func (_m *MockRepository) UpdatePond(ctx context.Context, req model.UpsertPond) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UpsertPond) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
